package catan.model;

import java.io.FileReader;
import java.util.HashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class JsonPlugin implements Plugin {
	
	private static final String NEWGAMEFILE = "server/newGame.json";
	private static final String DEFAULTGAMEFILE = "server/defaultGame.json";
	private static final Gson gson = new Gson();

	private static final Set<String> resourceNames;

	static {
		resourceNames = new HashSet<>();
		resourceNames.add("brick");
		resourceNames.add("ore");
		resourceNames.add("sheep");
		resourceNames.add("wheat");
		resourceNames.add("wood");
	}

	private JsonObject model;
	private String gameName;
	private int revision = 0;

	public JsonPlugin(String name, boolean randomTokens, boolean randomHexes, boolean randomPorts) {
		this.gameName = name;
		try {
			FileReader file = new FileReader(DEFAULTGAMEFILE);
			model = gson.fromJson(file, JsonObject.class);
			System.out.println(model);
			file.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Player getPlaleryByIndex(int playerIndex) {
		// TODO Auto-generated method stub
		return null;
	}

	/*
	@Override
	public Player getPlayerByIndex(int playerIndex) {
		Player player = model.getAsJsonArray("players").get(playerIndex).getAsJsonObject();
		return player;
	}
	*/
	
	// ------------------------------
	// AWESOME HELPER METHODS
	// ------------------------------
	@Override
	public Number[] getNumbers (int number) {
		//TODO AutoGenerated
		JsonArray numbers = model.getAsJsonObject("map").getAsJsonObject("numbers").getAsJsonArray(Integer.toString(number));
		return null;
	}
	
	@Override
	public Hex[] getHexes () {
		//TODO AutoGenerated
		JsonArray hexes =  model.getAsJsonObject("map").getAsJsonObject("hexGrid").getAsJsonArray("hexes");
		return null;
	}
	
	private JsonArray getVertexes (JsonArray hexes, int HexX, int HexY) {
		HexX += 3;
		HexY += 3;
		JsonArray vertexes = ((JsonObject)((JsonArray) hexes.get(HexY)).get(HexX)).getAsJsonArray("vertexes");
		return vertexes;
	}
	
	private JsonObject getPlayerByIndex (int playerIndex) {
		JsonObject player = model.getAsJsonArray("players").get(playerIndex).getAsJsonObject();
		return player;
	}
	
	private JsonObject getPlayerById (int id) {
		return null;
	}
	
	private JsonObject getEdge () {
		return null;
	}
	
	private JsonObject[] getEdgesHexes () {
		return null;
	}

	private void addLogEntry(int playerIndex, String message) {
		String name = getPlayerByIndex(playerIndex).get("name").getAsString();
		message = name + message;
		model.getAsJsonObject("log").getAsJsonArray("lines").add(createEntry(name, message));
	}

	private JsonElement createEntry(String source, String message) {
		return gson.fromJson("{\"source\":\"" + source + "\",\"message\":\"" + message + "\"}", JsonElement.class);
	}

	public JsonObject buildSettlement(int playerIndex) {
		return model;
	}

	@Override
	public Player[] getPlayers() {
		// TODO Auto-generated method stub
		return null;
	}
}
